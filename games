#!/usr/bin/env python3.2
"""
Script for listing all games in contrib.

games list
games info <game>

"""
from argparse import ArgumentParser
from os import listdir
import json
import logging
import re

CONTRIB_DIR = '/contrib/projects/'
GAMES_DIR = CONTRIB_DIR + 'games/'
MANUAL_ENTRY_DIR = GAMES_DIR + 'manual/' # TODO: The path is confusing.

MANUAL_ENTRY_POSTFIX = '.json'
GAME_JSON_FILE = '.games.json'

def main():
	args = set_and_parse_args()
	setup_logging(args.verbose)
	if args.info: show_game_info()
	else: print_games()

def set_and_parse_args():
	parser = ArgumentParser(description='Student contrib games information '
			'tool. Running without arguments will list all the known games in '
			'contrib.') # TODO: Add info about adding your game.
	parser.add_argument('-v', '--verbose', action='count', help='show '
			'debugging information; -vv shows even more debugging information')
	parser.add_argument('-i', '--info', nargs=1, metavar='NAME',
			help='display detailed information about the project specified by '
			'NAME')
	return parser.parse_args()

def setup_logging(verbosity):
	"""Inits logging on the number of -v args received, given as verbosity."""
	if verbosity is None: level = logging.WARNING
	elif verbosity == 1: level = logging.INFO
	else: level = logging.DEBUG
	logging.basicConfig(level=level)

def print_games():
	"""Finds all games in contrib and displays them to the user."""
	for game in get_games_list():
		print(game)

def get_games_list():
	"""Returns a list of Game for all the games in contrib."""
	projects = set(listdir(CONTRIB_DIR))
	projects |= {re.sub('\.json$', '', f) for f in listdir(MANUAL_ENTRY_DIR)}
	games = []
	for proj_name in projects:
		game = load_game(proj_name)
		if isinstance(game, Game):
			logging.info('Successfully loaded "%s".' % proj_name)
			games.append(game)
	return games

def load_game(proj_name):
	"""Returns a Game if the given project is found, else returns None."""
	proj_path = CONTRIB_DIR + proj_name + '/' + GAME_JSON_FILE
	manual_entry_path = MANUAL_ENTRY_DIR + proj_name + MANUAL_ENTRY_POSTFIX

	json_paths = [proj_path, manual_entry_path]
	for path in json_paths:
		try:
			with open(path) as f:
				game_info = json.load(f)
		except IOError as e:
			# TODO: This is not true (ex: permission denied). Print e instead.
			logging.debug(path + ' does not exist.')
		except Exception as e: # TODO: Is there a more specific exception?
			logging.info('Invalid json for project "%s".' % proj_name)
		else:
			break
	else:
		logging.info('No valid .json file found for project "%s".' % proj_name)
		return None

	try:
		game = Game(proj_name, game_info)
	except Exception as e:
		logging.info('Unable to construct "%s".' % proj_name)
		logging.debug('Problems with construction: ' + str(e))
		return None
	return game

class Game:
	"""Represents a single contrib/ game."""
	def __init__(self, proj_name, game_info):
		v = self.InitVerifier()

		self.proj_name = proj_name
		self.name = v.getAndVerify(game_info, 'name')
		self.desc = v.getAndVerify(game_info, 'desc')
		self.url = v.getAndVerify(game_info, 'url', False)
		self.loaded_json = game_info

		if not v.valid: raise Exception(v.getLog())

	def __str__(self):
		return str(self.loaded_json)

	class InitVerifier:
		"""Handles verification of Game.__init__ through the given json."""
		log = []
		valid = True

		def getAndVerify(self, d, key, required=True):
			"""Gets d[key] if it exists, otherwise None.

			If a non-existent key is required, an error is logged.

			"""
			if key in d: return d[key]
			elif required:
				self.valid = False
				self.log.append('Missing required "%s" attribute' % key)
			return None

		def getLog(self):
			return '; '.join(self.log)

def show_game_info():
	print('show_game_info(): NOT YET IMPLEMENTED.')

if __name__ == '__main__':
	main()
